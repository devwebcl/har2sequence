#!/usr/bin/perl
##############################################################################
#
# Script:   har2sequence
#
# Author:   Donovan Jones <donovan@catalyst.net.nz>
#
# Description:
#
# Convert HTTP Archive format (HAR) to websequencediagrams compatible output
#

# perl -MCPAN -e shell
# install Mozilla::CA

use 5.010;
use strict;
use warnings;

use Pod::Usage;
use Getopt::Long qw(GetOptions);

use File::Slurp;
use Data::Dump qw(dump);
use JSON::PP;
use Text::SimpleTable;
use List::Util qw(max);
use LWP::UserAgent;
use Mozilla::CA;

my (%opt);

if (!GetOptions(
    \%opt,
    'help|?',
    'output|o=s',
    'style|s=s',
    'host|h',
    'outfile|f=s',
    'list-styles|l',
)) {
    pod2usage(-exitval => 1,  -verbose => 0);
}

pod2usage(-exitstatus => 0, -verbose => 1) if $opt{help};

if (defined $opt{output}) {
    unless (grep { $opt{output} eq $_ } qw( sequence table dump png svg pdf ) ) {
        pod2usage(-exitstatus => 0, -verbose => 1);
    }
}
else {
    $opt{output} = 'sequence';
}

my @wsd_styles = qw(
    default
    earth
    magazine
    modern-blue
    mscgen
    napkin
    omegapple
    patent
    qsd
    rose
    roundgreen
);

if (defined $opt{style}) {
    unless (grep { $opt{style} eq $_ } @wsd_styles ) {
        pod2usage(-exitstatus => 0, -verbose => 1);
    }
}
else {
    $opt{style} = 'default';
}

if (defined $opt{'list-styles'}) {
    print "Valid styles:\n\n";
    foreach my $style (@wsd_styles) {
        print "$style\n";
    }
    exit;
}

my $file = shift;

unless (defined $opt{outfile}) {
    my @file_parts = split/\./, $file;
    pop @file_parts;
    $opt{outfile} = join'.', @file_parts;
}

# TODO: add a flag to change this
my $client = 'Browser';

# TODO: change this to mime allow (whitelist vs blacklist)
my @mime_ignore = qw(
    application/javascript
    application/octet-stream
    application/x-javascript
    image/gif
    image/jpeg
    image/png
    image/svg+xml
    image/x-icon
    text/css
    text/javascript
);

my $har  = read_file($file) ;
my $data = decode_json $har;

my $report = [];

 SKIPMIME: foreach my $entry (sort {$a->{startedDateTime} cmp $b->{startedDateTime}} @{ $data->{log}{entries} }) {
     # We only extract the information if the MIME type is acceptable
     next SKIPMIME if ( grep ($entry->{response}{content}{mimeType} eq $_, @mime_ignore) );
     
     my $truncated_request_url  = $entry->{request}{url};
     my $truncated_response_url = $entry->{response}{redirectURL};
     # Extract Host header
     my $host  = $entry->{request}{url};
     $host =~ s{https?:\/\/([^\/]+).*}{$1};
     
     # If we put the Host information in the participant, we can remove that part from request URL
     if (defined $opt{host}) {
	 $truncated_request_url =~ s{https?:\/\/[^\/]+(.*)}{$1};
     }
     
     # TODO allow overriding of truncation
     # TODO get param function
     # TODO support dumping get parameters
     $truncated_request_url  =~ s{\? .* \z }{?<get_parameters>}xms;
     $truncated_response_url =~ s{\? .* \z }{?<get_parameters>}xms;
     # TODO add flag to allow us to skip comms with a particular server
     my $report_line = {
	 location              => '',
	 host                  => $host,
	 request_method        => $entry->{request}{method}             // '',
	 request_url           => $entry->{request}{url}                // '',
	 truncated_request_url => $truncated_request_url                // '',
	 response_status       => $entry->{response}{status}            // '',
	 response_status_text  => $entry->{response}{statusText}        // '',
	 response_redirect_url => $truncated_response_url               // '',
	 request_mime_type     => $entry->{response}{content}{mimeType} // '',
	 server_ip_address     => $entry->{serverIPAddress}             // '',
     };
     
     foreach my $header (@{ $entry->{response}{headers} }) {
	 if ($header->{name} eq 'Location') {
	     my $location = $header->{value};
	     $location =~ s{\? .* \z }{?<get_parameters>}xms;
	     $report_line->{location} = $location;
	 }
     }

     push @{ $report }, $report_line;
}

if ($opt{output} eq 'sequence') {
    my $sequence_text = generate_sequence($report);
    print $sequence_text;
}
elsif ( grep { $opt{output} eq $_ } qw( png svg pdf ) ) {
    my $sequence_text = generate_sequence($report);
    my $wsd_result    = wsd_post($opt{output}, $opt{style}, $sequence_text);
    print $wsd_result . "\n";

}
elsif ($opt{output} eq 'table') {
    output_table($report);
}
elsif ($opt{output} eq 'dump') {
    print dump($report);
}

sub wsd_post {
    my $wsd_format  = shift;
    my $wsd_style   = shift;
    my $wsd_message = shift;

    print "hola\n";
    my $wsd_url   = 'https://www.websequencediagrams.com/index.php';
    my $ua        = LWP::UserAgent->new();
    $ua->agent("har2sequence/0.1 " . $ua->agent);

    print "wsd_url=" . $wsd_url . "\n";
    print "wsd_style=" . $wsd_style . "\n";
    print "wsd_message=" . $wsd_message . "\n";
    print "wsd_format=" . $wsd_format . "\n";

    my $response  = $ua->post( $wsd_url, {
        'style'   => $wsd_style,
        'message' => $wsd_message,
        'format'  => $wsd_format,
    } );
    print "response=" . $response . "\n";
    my $content   = $response->decoded_content();
    print "content=" . $content . "\n";
    #{img: "?img=mscGSIfnU", page: 0, numPages: 1, errors: []}'
    # INVALID JSON!, keys not quoted
    my $coder = JSON::PP->new->ascii->allow_barekey;
    my $wsd_data  = $coder->decode($content);
    # TODO: report any errors to user
    my $file_url  = 'http://www.websequencediagrams.com/' . $wsd_data->{img};
    my $file_name = $opt{outfile} . '.' . $wsd_style . '.' . $wsd_format;
    $file_name = $opt{outfile} . '.' . $wsd_format if $wsd_style eq 'default';

    $ua->mirror( $file_url, $file_name );

    return "retrieved $file_name from $file_url";
}

sub output_table {
    my $report = shift;

    my @keys = qw(
        request_method
        truncated_request_url
	host
        server_ip_address
        response_status
        response_status_text
        location
        request_mime_type
    );

    my @headings;

    foreach my $key (@keys) {
        my $max_value_length = max map{ length($_->{$key}) } @{ $report };
        #$max_value_length = 60 if $key eq 'request_url';
        push @headings, [$max_value_length, $key];
    }

    my $t1 = Text::SimpleTable->new(@headings);
    foreach my $connection (@{ $report }) {
        my @row;
        foreach my $key (@keys) {
            push @row, $connection->{$key};
        }
        $t1->row(@row);
    }
    print $t1->draw;
}

sub generate_sequence {
    my $report = shift;

    my $sequence_txt = '';

    foreach my $connection (@{ $report }) {
	
	# Host Header instead of IP
	my $participant = '';
	if (defined $opt{host}) {
	    $participant = $connection->{host};
	}
	else {
	    $participant = $connection->{server_ip_address};
	}
	
        $sequence_txt .= $client
                      . '->'
                      . $participant
                      . ': '
                      . $connection->{request_method}
                      . ' '
                      . $connection->{truncated_request_url}
                      . "\n";
        $sequence_txt .= $participant
                      . '-->'
                      . $client
                      . ': '
                      . $connection->{response_status}
                      . "\n";
    }

    return $sequence_txt;
}

exit 0;

__END__

=head1 NAME

har2sequence - Convert HTTP Archive format (HAR) to websequencediagrams compatible output

=head1 SYNOPSIS

  har2sequence [options] <HAR file>

  Options:

   --help        detailed help message
   --output      specify output format
   --outfile     override the output filename
   --style       websequencediagrams style
   --host        use Host header instead of Server IP
   --list-styles list valid styles for websequencediagrams

=head1 DESCRIPTION

TODO_DESCRIPTION

=head1 OPTIONS

=over 4

=item B<--help>

Display this documentation.

=item B<--output>

Specify the output format. Valid formats are txt (default), table, dump, png,
svg and pdf.

=item B<--outfile>

Override the output filename. This option is only valid for the png, svg and
pdf outputs that are produced via the websequencediagrams.com API.

=item B<--style>

Specify the websequencediagrams style, use --list-styles for a listing of valid
styles. This option is only valid for the png, svg and pdf outputs that are
produced via the websequencediagrams.com API.

=item B<--host>

Use the Host header (request) as the name of each participant instead of using the
target IP address.

=item B<--list-styles>

List valid styles for websequencediagrams. These styles are only valid for the
png, svg and pdf outputs that are produced via the websequencediagrams.com API.

=back

=cut
